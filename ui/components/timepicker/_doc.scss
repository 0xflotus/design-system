// Copyright (c) 2015-present, salesforce.com, inc. All rights reserved
// Licensed under BSD 3-Clause - see LICENSE.txt or git.io/sfdc-license

/**
 * #### Implementation Notes and Requirements
 *
 * The timepicker has the following markup requirements:
 *
 * **Desktop**
 * - Add `.slds-is-open` to the element with `.slds-dropdown-trigger` to invoke the dropdown that contains the list of time options.
 * - The `.slds-has-focus` modifier class is required on the `.slds-listbox__option` element that has focus.
 * - The `.slds-is-selected` modifier class is required on the `.slds-listbox__option` element that has been selected.
 *
 * **Mobile**
 * - When on mobile, we want to leverage the native timepicker by changing the `input` type from `text` to `time`
 * - When switching `input type="text"` to `input type="time"` for mobile, we need to remove the ARIA specifications that describe the input as a combobox.
 *   - On the element with the class `slds-combobox`, please remove `role="combobox"`, `aria-expanded`, and `aria-haspopup` since we won't be controlling a listbox on native.
 *   - On the `input` that we just added `type="time"` too, please remove `aria-controls`, `aria-autocomplete`, and `role="textbox"`.
 *
 * #### Accessibility
 *
 * We follow the ARIA Combobox widget pattern to implement this component.
 * Comboboxes allows the user to have dual keyboard focus enabling them to
 * select an option from the list with arrow keys, whilst leaving browser focus
 * inside the `input`.
 *
 * We have decided to implement the Combobox based on the [ARIA 1.1 specification](http://w3c.github.io/aria/aria/aria.html#combobox).
 *
 * The Combobox from ARIA 1.1 is a composite widget, in that it is a widget
 * that is composed of other widgets or concepts.
 *
 * In this implementation the `combobox` now owns (by means of parent / child relationships)
 * a `textbox` and a `listbox` of `option`'s.
 *
 * **Expected markup:**
 *
 * ##### Combobox
 *
 * - A Combobox must come with an associated `label` element, with an appropriate `for` attribute
 * - `slds-combobox` acts as the root node to the composite Combobox widget. It takes the `role="combobox"` attribute as a result
 *   - `aria-haspopup="listbox"` attribute is then applied to indicate the Combobox will display a popup, of type `listbox`
 *   - `aria-expanded="true|false"` attribute is applied to describe whether the popup of `listbox` is currently visible or not
 *
 * ##### Textbox
 *
 * - The Textbox is an `input` with a role of `textbox`. The role is implicit on inputs, but in this case it doesn't hurt to be explicit
 * - The Textbox has `autocomplete="off"` to remove the browsers suggestions from the `input`
 * - The Textbox has `aria-controls=""` which points to the ID of the `listbox`. It informs Assistive Technology what DOM node the input controls, in display or content
 * - The Textbox has the `type` attribute set to be `text` as it's not a search field
 * - The Textbox has `aria-activedescendant` attribute applied only when an option is in "dual focus" via keyboard navigation, otherwise it should be removed
 * - The Textbox gets a `value` set to reflect that that option has been selected by the user
 *
 * ##### Textbox - Autocomplete
 *
 * - The Textbox has `aria-autocomplete="list"` attribute applied
 *
 * ##### Listbox
 *
 * - The `listbox` has `role="listbox"` applied
 * - The `listbox` can have child `option`'s. We place `role="option"` on a `span` element, inside a list item. As such the list item `li` needs to be removed from the Accessibility Tree with `role="presentation"`
 * - A `listbox` has the ability to group options together under a visual heading or label. This means the `role="listbox"` attribute is placed on a common parent element, which can wrap multiple lists (or groups) of options
 *   - When a `listbox` has no option groups
 *     - The `ul` element has `role="presentation"` to remove it from the Accessibility Tree
 *   - When a `listbox` has option groups, each group gets a visual label. Exactly like `optgroup` in a `select` element
 *     - The `ul` element in this case has `role="group"` with an `aria-label` that describes the group
 *     - Display the group label visually, but due to the way a listbox works it can only be marked as `role="presentation"`, as a `listbox` can only have `option` children. This allows us to communicate the group label visually and programmatically to a screen reader
 * - Every `option` has `aria-selected="false"` by default
 * - Disabled `option`s should have `aria-disabled="true"` applied
 *
 * **Expected keyboard interactions:**
 *
 * - Focus is placed into the `input` by the user
 * - The `listbox` is show on `input` focus, and `aria-expanded` is set to `true` on the `combobox` element to reflect that
 * - Up and Down arrow keys cycle through the available `option`s by setting and updating `aria-activedescendant="id_of_option"` on the `input`, each time you press the arrow key
 *   - `aria-selected` on the current `option` is changed to `true`
 *   - Disabled options should be skipped
 * - Esc key closes the `listbox` and sets `aria-expanded` to `false` on the `combobox`
 * - Enter key confirms selection, sets `value` if not already set, and closes the `listbox` and sets `aria-expanded` to `false` on the `combobox`
 *
 * ##### Autocomplete (when not allowing free form text as a valid value)
 *
 * - Up and Down arrows also **should** update the `input` value as you navigate through the list, to reflect the currently selected option
 * - Enter key, with an option selected should also set `readonly` on the `input`
 * - Esc key with an option selected should remove `readonly` and clear the `value` of the `input`
 *
 * @summary A timepicker is an autocomplete text input to capture a time.
 *
 * @base
 * @name timepicker
 * @selector .slds-timepicker
 * @support dev-ready
 * @category experience
 * @type data-entry
 * @role combobox
 */
